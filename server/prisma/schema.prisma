// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ActionType {
  BitNoise
  Drop
  Pause
  Reorder
  SocketTcp
  Skip
  Delay
  Finish
  Restart
  Replicate
  Throttle
}

model Action {
  id    Int            @id @default(autoincrement())
  type  ActionType
  name  String
  data  Json?
  rules ActionToRule[]
}

enum GuardType {
  Count
  CountPeriod
  EveryN
  ICMP
  IP
  Port
  Prob
  Protocol
  Size
  Time
  TimePeriod
}

model Guard {
  id     Int           @id @default(autoincrement())
  type   GuardType
  name   String
  invert Boolean
  data   Json?
  rules  GuardToRule[]
}

model ActionToRule {
  action Action @relation(fields: [actionId], references: [id])
  rule   Rule   @relation(fields: [ruleId], references: [id])

  actionId Int
  ruleId   Int

  @@id([actionId, ruleId])
}

model GuardToRule {
  action Guard @relation(fields: [guardId], references: [id])
  rule   Rule  @relation(fields: [ruleId], references: [id])

  guardId Int
  ruleId  Int

  @@id([guardId, ruleId])
}

enum RuleType {
  All
  Any
}

model Rule {
  id        Int              @id @default(autoincrement())
  type      RuleType
  name      String
  actions   ActionToRule[]
  guards    GuardToRule[]
  scenarios RuleToScenario[]
}

model RuleToScenario {
  rule     Rule     @relation(fields: [ruleId], references: [id])
  scenario Scenario @relation(fields: [scenarioId], references: [id])

  ruleId     Int
  scenarioId Int

  @@id([ruleId, scenarioId])
}

enum ScenarioType {
  Sequential
  // SequentialHttp TODO: maybe add support for this?
}

model Scenario {
  id            Int              @id @default(autoincrement())
  name          String
  type          ScenarioType
  defaultAction ActionType
  rules         RuleToScenario[]
}

enum ConfigMode {
  nf_mark
  socket
  tc_mark_vlan
}

model Config {
  id Int @id @default(autoincrement())
  name String
  mode ConfigMode
  data Json
}
